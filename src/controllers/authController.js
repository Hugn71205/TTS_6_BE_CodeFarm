import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import UserModel from "../models/User.js";
import { sendMail } from "../utils/sendMail.js"; // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt h√†m g·ª≠i mail

const tempUsers = {};

async function register(req, res) {
  try {
    const { name, email, password } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i trong DB th·∫≠t ch∆∞a
    const existingUser = await UserModel.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // T·∫°o m√£ code x√°c minh v√† th·ªùi gian h·∫øt h·∫°n
    const verificationCode = ("" + Math.floor(100000 + Math.random() * 900000));
    const codeExpire = new Date(Date.now() + 15 * 60 * 1000);

    // L∆∞u t·∫°m user v√† m√£ (password ch∆∞a hash)
    tempUsers[email] = { name, email, password, verificationCode, codeExpire };

    // G·ª≠i mail ch·ª©a m√£
    await sendMail(email, "M√£ x√°c minh", `M√£ c·ªßa b·∫°n: ${verificationCode}`);

    return res.status(200).json({ message: "M√£ x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i." });
  } catch (error) {
    console.error("L·ªói register:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

async function login(req, res) {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "H√£y ƒëi·ªÅn email v√† password!" });
    }

    if (password.length < 6) {
      return res.status(400).json({ message: "Password t·ªëi thi·ªÉu 6 k√≠ t·ª±!" });
    }

    const user = await UserModel.findOne({ email });
    if (!user) {
      return res.status(401).json({
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i, h√£y ki·ªÉm tra l·∫°i email v√† m·∫≠t kh·∫©u!",
      });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u, h√£y ki·ªÉm tra v√† th·ª≠ l·∫°i!" });
    }

    // ‚úÖ Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
    if (user.isBlocked) {
      return res.status(403).json({ message: "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n." });
    }

    const token = jwt.sign({ id: user._id }, "diablo", { expiresIn: "1w" });

    res.json({ ...user.toObject(), password: undefined, token });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}


async function getAllUsers(req, res) {
  try {
    const users = await UserModel.find({}, { password: 0 });

    res.json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}

export { register, login, getAllUsers};

export const deleteUser = async (req,res)=>{
    try {
        // L·∫•y id
        const id = req.params.id
        // T√¨m s·∫£n ph·∫©m theo id
        const user = await UserModel.findOne({_id:id})
        if (user){
            await UserModel.findOneAndDelete({_id:id})
            res.status(200).send({message:"X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng",status:true})
        }
        else throw {mes:"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",code:404}
    } catch (error) {
        // console.log(error);        
        res.status(error.code??500).send({message:error.mes??"X√≥a kh√¥ng th√†nh c√¥ng",status:false})
    }
}

// controllers/user.controller.ts
export const blockUser = async (req, res) => {
  try {
    const { id } = req.params
    const { isBlocked } = req.body

    const updatedUser = await UserModel.findByIdAndUpdate(id, { isBlocked }, { new: true })

    if (!updatedUser) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" })
    }

    res.json({ message: isBlocked ? "ƒê√£ kh√≥a ng∆∞·ªùi d√πng" : "ƒê√£ m·ªü kh√≥a ng∆∞·ªùi d√πng", user: updatedUser })
  } catch (error) {
    res.status(500).json({ message: error.message })
  }
}

 // t√πy v·ªã tr√≠ file c·ªßa b·∫°n

async function verifyEmailHandler(req, res) {
  try {
    console.log("üì® Body nh·∫≠n ƒë∆∞·ª£c:", req.body);

    const { email, code } = req.body;

    if (!email?.trim() || !code?.trim()) {
      console.warn("‚ö†Ô∏è Thi·∫øu email ho·∫∑c m√£ x√°c minh:", { email, code });
      return res.status(400).json({ message: "Email v√† m√£ x√°c minh l√† b·∫Øt bu·ªôc." });
    }

    const user = await UserModel.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
    }

    if (user.verified) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c x√°c minh." });
    }

    const expireDate = new Date(user.codeExpire);
    const now = new Date();

    if (!expireDate || expireDate < now) {
      return res.status(400).json({ message: "M√£ x√°c minh ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi." });
    }

    if (user.verificationCode !== code) {
      return res.status(400).json({ message: "M√£ x√°c minh kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i." });
    }

    user.verified = true;
    user.verificationCode = null;
    user.codeExpire = null;
    await user.save();

    return res.status(200).json({ message: "‚úÖ X√°c minh email th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói verifyEmailHandler:", error);
    return res.status(500).json({ message: "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
}

export { verifyEmailHandler };





